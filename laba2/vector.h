// 1) Определить пользовательский класс в соответствии с вариантом 
// задания, место под массивы выделять в динамической памяти.
// 2) Определить в классе следующие конструкторы: без параметров, с 
// параметрами, копирования.
// 3) Определить в классе деструктор.
// 4) Определить в классе методы для просмотра и установки полей 
// данных.
// 5) Написать демонстрационную программу, в которой создаются и 
// разрушаются объекты пользовательского класса и каждый вызов 
// конструктора и деструктора сопровождается выдачей соответствующего 
// сообщения (какой объект какой конструктор или деструктор вызвал).
// 6) Показать в программе использование указателя на объект.
// Примечание: В случае одномерных массивов вещественных чисел при 
// необходимости достраивать массивы до одной длины, заполняя новые 
// ячейки единицами. В случае деления на ноль, заменять ноль на 0.00001

// Определить класс − одномерный массив (вектор) вещественных чисел. В класс включить два конструктора: для определения класса массива числом элементов и путем копирования другого массива (объекта класса массива).
// Определить операции над массивами:
// − вычитание элементов массива (a[i]-b[i] для всех i);
// – – сортировать элементы массива по возрастанию.			[+]


#ifndef VECTOR_H
#define VECTOR_H
class Vector
{
private:
	int n = 0; 															//размерность массива
	int* vector;														//массив со значением вектора
//	Vector chLength(Vector &vector_, const int newLen);													//изм длинны вектора
public:
	Vector();															//конструктор без параметров, по умолчанию значения {1,1,1}
	Vector(const int& amount_);											//конструктор с заданием количества элементов и их значением
	Vector(Vector& vector_);										//копирование вектора
	void SetVector();			//изменение значений вектора
	void GetVector() const;													//вывод значений вектора на экран
	int GetSizeVector() const;													//получение размера массива
	void SortVector();									//сортировка вектора по возрастанию
	Vector& operator-(const Vector& vector_);			//перегрузка -
	//Vector operator+ (Vector& vector_);					//переопределение оператора +
	//Vector operator- (const Vector& vector_);					//переопределение оператора -
	~Vector();															//деструктор
};


#endif
